//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: com/taylor/demo/protobuf/ad_log.proto

package com.taylor.demo.protobuf.gen;

@kotlin.jvm.JvmName("-initializeevent")
public inline fun event(block: com.taylor.demo.protobuf.gen.EventKt.Dsl.() -> kotlin.Unit): com.taylor.demo.protobuf.gen.AdLog.Event =
  com.taylor.demo.protobuf.gen.EventKt.Dsl._create(com.taylor.demo.protobuf.gen.AdLog.Event.newBuilder()).apply { block() }._build()
public object EventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.taylor.demo.protobuf.gen.AdLog.Event.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.taylor.demo.protobuf.gen.AdLog.Event.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.taylor.demo.protobuf.gen.AdLog.Event = _builder.build()

    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadSuccess loadSuccess = 1;</code>
     */
    public var loadSuccess: com.taylor.demo.protobuf.gen.AdLog.LoadSuccess
      @JvmName("getLoadSuccess")
      get() = _builder.getLoadSuccess()
      @JvmName("setLoadSuccess")
      set(value) {
        _builder.setLoadSuccess(value)
      }
    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadSuccess loadSuccess = 1;</code>
     */
    public fun clearLoadSuccess() {
      _builder.clearLoadSuccess()
    }
    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadSuccess loadSuccess = 1;</code>
     * @return Whether the loadSuccess field is set.
     */
    public fun hasLoadSuccess(): kotlin.Boolean {
      return _builder.hasLoadSuccess()
    }

    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadFail loadFail = 2;</code>
     */
    public var loadFail: com.taylor.demo.protobuf.gen.AdLog.LoadFail
      @JvmName("getLoadFail")
      get() = _builder.getLoadFail()
      @JvmName("setLoadFail")
      set(value) {
        _builder.setLoadFail(value)
      }
    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadFail loadFail = 2;</code>
     */
    public fun clearLoadFail() {
      _builder.clearLoadFail()
    }
    /**
     * <code>.com.taylor.demo.protobuf.gen.LoadFail loadFail = 2;</code>
     * @return Whether the loadFail field is set.
     */
    public fun hasLoadFail(): kotlin.Boolean {
      return _builder.hasLoadFail()
    }
    public val eventCase: com.taylor.demo.protobuf.gen.AdLog.Event.EventCase
      @JvmName("getEventCase")
      get() = _builder.getEventCase()

    public fun clearEvent() {
      _builder.clearEvent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.taylor.demo.protobuf.gen.AdLog.Event.copy(block: com.taylor.demo.protobuf.gen.EventKt.Dsl.() -> kotlin.Unit): com.taylor.demo.protobuf.gen.AdLog.Event =
  com.taylor.demo.protobuf.gen.EventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.taylor.demo.protobuf.gen.AdLog.EventOrBuilder.loadSuccessOrNull: com.taylor.demo.protobuf.gen.AdLog.LoadSuccess?
  get() = if (hasLoadSuccess()) getLoadSuccess() else null

public val com.taylor.demo.protobuf.gen.AdLog.EventOrBuilder.loadFailOrNull: com.taylor.demo.protobuf.gen.AdLog.LoadFail?
  get() = if (hasLoadFail()) getLoadFail() else null

