package com.taylor.easylog


object EasyLog {

    /**
     * Priority constant for the println method; use Log.v.
     */
    const val VERBOSE = 2

    /**
     * Priority constant for the println method; use Log.d.
     */
    const val DEBUG = 3

    /**
     * Priority constant for the println method; use Log.i.
     */
    const val INFO = 4

    /**
     * Priority constant for the println method; use Log.w.
     */
    const val WARN = 5

    /**
     * Priority constant for the println method; use Log.e.
     */
    const val ERROR = 6

    /**
     * Priority constant for the println method.
     */
    const val ASSERT = 7

    private val interceptors = mutableListOf<Interceptor<in Nothing>>()
    private val chain = Chain(interceptors)
    private var onetimeInterceptor: Interceptor<*>? = null

    fun log(message: Any, priority: Int = VERBOSE, vararg args: Any) {
        chain.proceed("", message, priority, *args) // tag will auto-generated by interceptor
        onetimeInterceptor?.also { removeInterceptor(it) }
    }

    fun tag(tag: String): EasyLog {
        interceptors.forEach { it.tag = tag }
        return this
    }

    fun addInterceptor(interceptor: Interceptor<*>) {
        addInterceptor(interceptors.size, interceptor)
    }

    fun addInterceptor(index: Int, interceptor: Interceptor<*>) {
        interceptors.add(index, interceptor)
    }

    fun interceptor(interceptor: Interceptor<*>): EasyLog {
        var index = interceptors.indexOfFirst { it.javaClass.simpleName == FormatInterceptor::class.java.simpleName }
        if (index == -1) index = 0
        else index += 1
        interceptors.add(index, interceptor)
        onetimeInterceptor = interceptor
        return this
    }

    fun removeInterceptor(interceptor: Interceptor<*>) {
        interceptors.remove(interceptor)
    }
}